---
title: "Data Science Applied to Ag - Final Project - Design"
author: "Selvin Carrillo Ramos"
format:
  html:
    code-fold: false
    embed-resources: true
    toc: true
    number-sections: true
    theme: cerulean
editor_options: 
  chunk_output_type: console
execute:
  #echo: false
  warning: false
  message: false
---


# Instructions  
This file contains both the **instructions** for the mid-term project and placeholders for your code. You are required to use this file to produce code, output, and answers to the questions below.  

Besides simply creating output, make sure to interpret the output. You will need to create tables and/or plots to arrive at the answers, and then comment on what you found below it.    

To get you setup, you will need to:  

  - Student #1: create a repository on your GitHub account. You can call this repository "2025dsa_finalproject_groupX", **where X is the number of your group**. Make it public, add a README, add a .gitignore for R.  
  - Student #1: follow the steps we did in class to start a new RStudio project with version control.  
  - Student #1: in your computer, create the sub-folders code, data, output, and move your data set into the `data` folder. Also, student 1 moves this current script into the `code` folder. Do a git stage, commit, push.  
  - Student #1: on GitHub, go the repository settings and invite your partner to be a collaborator in the repository. That will give them push permission.  
  - Now, both students should clone this repository on their computers like we did in class. Make sure this step works well and that you can pull and push from GitHub.  
  - Student 2, after cloning, does a git pull to get all these updates on their computer.  
  - Student 1 and 2 work together to update the README file. README files should explain what the repository is about, the goals of that project, who is working in it, and any other important details you may find.  
  
# Introduction  
Describe here the introduction of your problem. Consider this as a shortened version of your paper, where you will briefly discuss in 3-4 paragraphs what is the issue/gap in literature, and how the data you collected will help answer this gap.  

*Peach fruit quality constitutes a key factor in the fresh market due to consumer preferences for better taste, appealing color, higher nutrition, or extended fruit shelf life. Among other reasons, poor fruit quality has been attributed to a decline in peach consumption in the last decade (Anthony & Minas, 2022; Cirilli et al., 2016). To maintain or improve fruit quality, some commonly observed preharvest factors include manipulating crop load, fruit position, rootstock and cultivars, and training systems (Minas et al., 2018), yet foliar fertilizers have been overlooked. Foliar fertilizers constitute an integral tool for various commodity crops to provide essential nutrients at rapid growth stages to maintain physiological processes and achieve maximum yield (Taiz et al., 2015); however, the current Southeastern pest management and culture guide for peach, nectarine, and plum lacks any annual foliar spray recommendations.*    

*In the leaves, mobile nutrients, i.e., N, P, K and Mg, present in certain older tissues may compensate for deficiencies or demand in sink tissues; however, non-mobile nutrients, i.e., Ca and B, cannot be transported from older to young leaves (Taiz et al., 2015).  This is critical because, for example, K/Ca ratio contributes to fruit quality, i.e., cell strength and filling. Thus, by exploring nutrient statuses in the leaves during fruit growth, we might be able to get insights into the plant’s assimilation and translocation of nutrients. As noted previously, cultivar-specific preharvest practices, including ripening time, influence micro- and macronutrient concentration (Zhou & Melgar, 2019).*   

*Nanocellulose nanofibrils (CNF), an organic compound derived from dry matter, promise to gain greater use in agriculture. Recent studies explored its uses in freeze protection (Deana, 2023; unpublished) and as an adjuvant in pesticide and foliar applications in blueberries (Tasnim et al., 2022). However, how nanocellulose interacts alone or with foliar fertilizers in facilitating nutrient uptake in peaches, is not well known.*   

*For these reasons, we investigated whether the application of inorganic  foliar fertilizers, alone or in combination with nanocellulose during fruirt growth, enhances nutrient uptake; and, if the nutrient profiles change over time at preharvest. This will help us to assess whether or not the implementation of foliar mineral nutrition in orchard management programs adds any value to detect nutritional imbalances.*   

# Hypothesis and objectives  
Describe here your hypothesis, followed by your objectives. Make sure your hypothesis are testable and bold, and objectives are clear. 

*Application of inorganic foliar mineral nutrition alone or in combination with CNF will increase nutrient levels in the leaves during preharvest, and nutrient levels will change over time.*  

*The objectives were to assess the benefits of foliar mineral nutrition on nutrient levels in the leaves during preharvest leaf sap analysis, and to determine nutrient profile changes over time that might impact fruit quality at postharvest.*  

# Material and Methods  
Describe here your overall material and methods as it pertains to the analysis you will conduct, including study description, site/setup description, what equipment was used, etc. just like you would in a paper. Make sure to clearly explain what was measured and how.


*The experiment was conducted on a ten-year-old orchard, trained in an open-vase system, planted at 6.1 m x 4.6 m (20 x 15 ft) at the University of Georgia Peach Research and Extension farm in Griffin, GA. The cultivar Julyprince grafted onto Guardian rootstock was established in a Cecil sandy loam soil. Except treatment 7 (T7), none of the experimental trees received soil or foliar fertilizer applications in 2023, the year prior to the experiment initiation. Pruning was done twice per crop season, spring and summer, and fruit thinning at 50 DAFB in 2024. For pest control, the recommendations of southeastern pest management and culture guide were followed. Water was managed based on the Peach Smart Irrigation App recommendations <https://smartirrigationapps.org/peach-app/>. Even though there was no crop harvest due to a late freeze in 2023, trees were irrigated from July to October; and in 2024 late May to mid-October. *  

*Foliar applications were scheduled at two-week intervals on non-windy days with temperatures < 30 C to minimize burning or scorching on hot days when evaporation is high. We utilized DI water as solvent to avoid solution pH adjustments or potential incompatibility. In 2024, except T5 second spray, applications were at 36, 50, 67, 80, and 94 DAFB by following the average of the manufacturer's recommended dosage; except T5, which was reduced to half of the average recommended dose to minimize its viscosity. We ended applications four weeks before harvest. Each solution was mixed at 1000 rpm for 15 minutes and applied to the tree canopy using a spray gun with two nozzles connected to a CO2 pressurized sprayer, which gave a 35-40 psi. *  

*Foliar applications were carried out three or four days prior to leaf sampling. Except after the second foliar application, 90 g of old and new leaf samples, including petioles, were collected between 8 am and 11 am at 40, 72, 86, and 100 days after full bloom (DAFB) for sap analysis. Fully developed and expanded young leaves are around the third leaf from the growing point, and old functional leaves are from the middle to the last leaf on the woody growth for the current year. Samples with no surface moisture were placed in air-free Ziplock bags and then in coolers with ice packs, transported to the lab, and sent overnight for analysis. Samples were collected on clear days and temperatures < 27 °C.  *   

## Study design  
Clearly describe your study design here, including treatment design (which factors and levels, the hierarchy among them, etc.), and your experimental design (number of reps/blocks, how was randomization performed, etc.), as we talked about in class.  

*The experiment was conducted as a split-split plot randomized complete block design with three blocks. The whole-plot factor was the irrigation system with two levels, drip and micro-sprinkler. Within each whole plot, the split-plot factor was foliar treatment, consisting of water (control; T1), nanocellulose crystals (CNC 3%; T2), Calcium (Ca 6%; T3), Potassium Silicate (K2SiO3; T4), CNC plus Ca (T5), CNC plus K2SiO3 (T6), and soil-base fertilization (100% rate of 10-10-10 at preharvest and at 15.5-0-0 at postharvest; T7) (Table x). Within each foliar treatment, the split-split plot factor was leaf age, with two levels, new and Old leaves. Sampling was performed repeatedly over four time points during fruit growth, three days after foliar sprays, except for T7 which received two applications of soil-based fertilization per season. Randomization was implemented at each level and each block contained all combinations of factors, ensuring a balanced design across treatments.*

## Statistical analysis  
Describe here your statistical analysis, including what type of ANOVA model you ran (based on the design above), what was your response variable, what were your explanatory variables and how were the explanatory variables treated (random or fixed). Provide your alpha level. Explain which function from which package you used to analyze this data. Explain how you checked linear model assumptions and whether or not they were met. Overall, make sure you explain in sufficient detail that, if given your data, a knowledgeable person would be able to reproduce your analysis exactly.  

*To account for autocorrelation among repeated measures over time, linear mixed-effects models were fit using the `lme()` function from the `nlme`package, which allows specification of correlation structures. Plots were generated using the `ggplot2` package.*
*For leaf sap, fixed effects were specified as a full factorial of irrigation system, foliar treatment, leaf age (new vs. old leaves), and sampling time. Random effects were structured hierarchically as block/irrigation/foliar/leaf age, reflecting the split-split plot experimental design. To account for the repeated measures over time, ten candidate correlation structures were evaluated. The correlations included independence (none), compound symmetry (corCompSymm), general symmetric (corSymm), continuous autoregressive of order 1 (corCAR1), autoregressive moving average ARMA(1,1) (corARMA), exponential (corExp), Gaussian (corGaus), linear (corLin), ratio (corRatio), and spherical (corSpher), all applied to the residuals as a function of the numeric time variable DAB. Model selection was based on the lowest Akaike Information Criterion (AIC). Model assumptions were assessed through graphical evaluation of residual vs. fitted value plots, standardized residual QQ-plots, and random effects QQ-plots. Deviations from normality and homoscedasticity were noted for nitrogen conversion efficiency, sodium, silica, pH, and boron. Fixed effect significance was evaluated by Type III Anova from the `car` package. For factors with significant main effects or interactions, alpha < 0.05, pairwise comparisons of least-squares means were performed using the `emmeans` package with Tukey adjustment for multiple comparisons.*


# Results  
Here is where the coding is going to happen, and it will be completely up to you. Include under this section as many sub-sections (using ##) and as many chunks needed to create the analytical workflow for your analysis, starting at loading packages and data, wrangling, EDA, modeling, assumptions checking, ANOVA table, means, pairwise comparisons, and final publication-quality plot.  

Make sure to run a model that reflects your study design. Even if your study design does not include one of the designs covered in class, you are still expected to run the most appropriate model. If you need help for references, let me know.  

Before each chunk, describe the steps being performed in that chunk. For example, "Here I will load the data".  

If a chunk produces output, like printing a data frame, statistical summary, a plot, ANOVA table, etc., make sure to write text interpreting what you see and how you can/will use that information to move forward to the next steps in the workflow.  

```{r libraries, echo=FALSE}
# libraries 
library(kableExtra)
library(latexpdf)
library(readxl)
library(janitor)
library(tinytex)
library(patchwork)
library(shiny)
library(gridExtra)
library(car) # Anova function 
library(lme4) # model fitting 
library(lmerTest) # p-values
library(broom)# residuals extraction 
library(emmeans) # mean extraction 
library(multcomp) # pairwise comparison 
library(nlme) # repeated measures correlation structure

library(tidyverse)
library(gt) # great tables 
library(plotly)
library(here)
```


## 1) Read in and clean data 

Let's read in the datasets coming from the lab where each dataset should have 96 observations coming from four different time points. At the end, combine the datasets into one by assigning their respective time point, block, and treatments.   
First sampling
```{r 2024_first-sampling}
# read in data set from first sampling
sap_1 <- 
   read_csv(here("data/2024_first_sap_sampling_0423241049FL.csv")) %>% 
  # select columns I do not need
   dplyr::select(!c(1:11, nal_sample_id, date_sampled, time_sampled, sample_type, 
                    plant_type, variety, growth_stage, vigor)) %>% 
   clean_names() %>% 
  # separate column client_sample_id
   separate(client_sample_id, into = c("sample_id", "new_old"), sep = " ") %>% 
   mutate(across(c(sample_id), as.numeric)) %>%
  # arrange base on sample_id
   arrange(sample_id) %>% 
  # correct a mislabeled sample
   mutate(sample_location = case_when(sample_id == 37 ~ "S", 
                                      TRUE ~ sample_location)) %>%  # Sample 37 corresponds to soil 100% rate
  rename(n_conv_eff = nitrogen_conversion_efficiency, 
         sl = sample_location) %>% 
  # calculate days after blooming.    # first sampling April 18-19, 2024
  mutate(time_num = as.numeric(difftime(as.Date("2024-04-19"), 
                                         as.Date("2024-03-10"), 
                                         units = "days"))) %>% 
  # assign block, irrigation system, and treatment
   mutate(irr_system = case_when(sample_id %in% 1:18 & sl %in% "F"  ~ "drip", 
                                 sample_id %in% 1:24 & sl %in% "S"  ~ "drip", 
                                 .default =  "micro-sprinkler"),
          block = case_when(sample_id %in% c(1:6, 19:24) & sl %in% "F"   ~ "1", 
                           sample_id %in% c(7:12, 25:30) & sl %in% "F"   ~ "2", 
                           sample_id %in% c(1:8, 25:32) & sl %in% "S"   ~ "1", 
                           sample_id %in% c(9:16, 33:40) & sl %in% "S"   ~ "2", 
                           .default = "3"), 
          foliar_trt = case_when(sample_id %in% c(5,9,18,23,27,31) & sl %in% "F"   ~ "T1", 
                               sample_id %in% c(6,8,13,22,28,33) & sl %in% "F"  ~ "T2",
                               sample_id %in% c(1,11,17,19,30,36) & sl %in% "F"  ~ "T3",
                               sample_id %in% c(2,12,14,20,25,34) & sl %in% "F"  ~ "T4",
                               sample_id %in% c(3,7,16,21,29,32) & sl %in% "F"  ~ "T5",
                               sl %in% "S"  ~ "T7",
                               .default = "T6")) %>% 
  # relocate columns
   relocate(c(block,irr_system, foliar_trt, new_old, time_num), .after = sl) %>% 
   mutate(across(c(block,irr_system, foliar_trt, new_old), as.factor)) %>% 
   dplyr:: select(!c(sample_id, sl)) 


```

Second sampling   
```{r 2024_second-sampling}
# read in data set from second sampling
sap_2 <- 
   read_csv(here("data/2024_second_sap_sampling_0522241201FL.csv")) %>% 
  # select columns I do not need
   dplyr::select(!c(1:11, nal_sample_id, date_sampled, time_sampled, sample_type, 
                    plant_type, variety, growth_stage, vigor)) %>% 
   clean_names() %>% 
  # separate column client_sample_id
   separate(client_sample_id, into = c("sample_id", "new_old"), sep = " ") %>% 
   mutate(across(c(sample_id), as.numeric)) %>%
  # arrange base on sample_id
   arrange(sample_id) %>% 

  rename(n_conv_eff = nitrogen_conversion_efficiency, 
         sl = sample_location) %>% 
  # calculate days after blooming.  # second sampling May 20-21, 2024
   mutate(time_num = as.numeric(difftime(as.Date("2024-05-21"), # days after bloom
                                         as.Date("2024-03-10"), 
                                         units = "days"))) %>%
  # assign block, irrigation system, and treatment
   mutate(irr_system = case_when(sample_id %in% 1:18 & sl %in% "F"  ~ "drip", 
                                 sample_id %in% 1:24 & sl %in% "S"  ~ "drip", 
                                 .default =  "micro-sprinkler"),
          block = case_when(sample_id %in% c(1:6, 19:24) & sl %in% "F"   ~ "1", 
                           sample_id %in% c(7:12, 25:30) & sl %in% "F"   ~ "2", 
                           sample_id %in% c(1:8, 25:32) & sl %in% "S"   ~ "1", 
                           sample_id %in% c(9:16, 33:40) & sl %in% "S"   ~ "2", 
                           .default = "3"), 
          foliar_trt = case_when(sample_id %in% c(5,9,18,23,27,31) & sl %in% "F"   ~ "T1", 
                               sample_id %in% c(6,8,13,22,28,33) & sl %in% "F"  ~ "T2",
                               sample_id %in% c(1,11,17,19,30,36) & sl %in% "F"  ~ "T3",
                               sample_id %in% c(2,12,14,20,25,34) & sl %in% "F"  ~ "T4",
                               sample_id %in% c(3,7,16,21,29,32) & sl %in% "F"  ~ "T5",
                               sl %in% "S"  ~ "T7",
                               .default = "T6")) %>% 
  # relocate columns
   relocate(c(block,irr_system, foliar_trt, new_old, time_num), .after = sl) %>% 
   mutate(across(c(block,irr_system, foliar_trt, new_old), as.factor)) %>% 
   dplyr:: select(!c(sample_id, sl)) 
```

Third sampling   
```{r 2024_third-sampling}
# read in data set from third sampling
sap_3 <- 
   read_csv(here("data/2024_third_sap_sampling_0605241210FL.csv")) %>% 
  # select columns I do not need
   dplyr::select(!c(1:11, nal_sample_id, date_sampled, time_sampled, sample_type, 
                    plant_type, variety, growth_stage, vigor)) %>% 
   clean_names() %>% 
  # separate column client_sample_id
   separate(client_sample_id, into = c("sample_id", "new_old"), sep = " ") %>% 
   mutate(across(c(sample_id), as.numeric)) %>%
  # arrange base on sample_id
   arrange(sample_id) %>% 

  rename(n_conv_eff = nitrogen_conversion_efficiency, 
         sl = sample_location) %>% 
  # calculate days after blooming.  # third sampling June 3 -4 
  mutate(time_num = as.numeric(difftime(as.Date("2024-06-04"), # days after bloom
                                         as.Date("2024-03-10"), 
                                         units = "days"))) %>% 
  # assign block, irrigation system, and treatment
   mutate(irr_system = case_when(sample_id %in% 1:18 & sl %in% "F"  ~ "drip", 
                                 sample_id %in% 1:24 & sl %in% "S"  ~ "drip", 
                                 .default =  "micro-sprinkler"),
          block = case_when(sample_id %in% c(1:6, 19:24) & sl %in% "F"   ~ "1", 
                           sample_id %in% c(7:12, 25:30) & sl %in% "F"   ~ "2", 
                           sample_id %in% c(1:8, 25:32) & sl %in% "S"   ~ "1", 
                           sample_id %in% c(9:16, 33:40) & sl %in% "S"   ~ "2", 
                           .default = "3"), 
          foliar_trt = case_when(sample_id %in% c(5,9,18,23,27,31) & sl %in% "F"   ~ "T1", 
                               sample_id %in% c(6,8,13,22,28,33) & sl %in% "F"  ~ "T2",
                               sample_id %in% c(1,11,17,19,30,36) & sl %in% "F"  ~ "T3",
                               sample_id %in% c(2,12,14,20,25,34) & sl %in% "F"  ~ "T4",
                               sample_id %in% c(3,7,16,21,29,32) & sl %in% "F"  ~ "T5",
                               sl %in% "S"  ~ "T7",
                               .default = "T6")) %>%  
  # relocate columns
   relocate(c(block,irr_system, foliar_trt, new_old, time_num), .after = sl) %>% 
   mutate(across(c(block,irr_system, foliar_trt, new_old), as.factor)) %>% 
   dplyr:: select(!c(sample_id, sl)) 

```

Fourth sampling  
```{r 2024_fourth-sampling}
# read in data set from fourth sampling
sap_4 <- 
   read_csv(here("data/2024_fourth_sap_sampling_0619241330FL.csv")) %>% 
    # select columns I do not need
   dplyr::select(!c(1:11, nal_sample_id, date_sampled, time_sampled, sample_type, 
                    plant_type, variety, growth_stage, vigor)) %>% 
   clean_names() %>% 
  # separate column client_sample_id
   separate(client_sample_id, into = c("sample_id", "new_old"), sep = " ") %>% 
   mutate(across(c(sample_id), as.numeric)) %>%
  # arrange base on sample_id
   arrange(sample_id) %>% 

  rename(n_conv_eff = nitrogen_conversion_efficiency, 
         sl = sample_location) %>% 
  # calculate days after blooming.  # fourth samplin June 17-18
   mutate(time_num = as.numeric(difftime(as.Date("2024-06-18"), # days after bloom
                                         as.Date("2024-03-10"), 
                                         units = "days"))) %>% 
  # assign block, irrigation system, and treatment
   mutate(irr_system = case_when(sample_id %in% 1:18 & sl %in% "F"  ~ "drip", 
                                 sample_id %in% 1:24 & sl %in% "S"  ~ "drip", 
                                 .default =  "micro-sprinkler"),
          block = case_when(sample_id %in% c(1:6, 19:24) & sl %in% "F"   ~ "1", 
                           sample_id %in% c(7:12, 25:30) & sl %in% "F"   ~ "2", 
                           sample_id %in% c(1:8, 25:32) & sl %in% "S"   ~ "1", 
                           sample_id %in% c(9:16, 33:40) & sl %in% "S"   ~ "2", 
                           .default = "3"), 
          foliar_trt = case_when(sample_id %in% c(5,9,18,23,27,31) & sl %in% "F"   ~ "T1", 
                               sample_id %in% c(6,8,13,22,28,33) & sl %in% "F"  ~ "T2",
                               sample_id %in% c(1,11,17,19,30,36) & sl %in% "F"  ~ "T3",
                               sample_id %in% c(2,12,14,20,25,34) & sl %in% "F"  ~ "T4",
                               sample_id %in% c(3,7,16,21,29,32) & sl %in% "F"  ~ "T5",
                               sl %in% "S"  ~ "T7",
                               .default = "T6")) %>% 
  # relocate columns
   relocate(c(block,irr_system, foliar_trt, new_old, time_num), .after = sl) %>% 
   mutate(across(c(block,irr_system, foliar_trt, new_old), as.factor)) %>% 
   dplyr:: select(!c(sample_id, sl)) 


```


Final data set  
```{r 2024_sap-all-samples, warning=F}
# combined data set for all four sap sampling times (48 trees * 2 samples per tree = 96 samples per time point. So, 96 samples * 4 sampling times = 384 observations). However, we need to summarize the samples from `S` because there are two subsamples or trees per time point, otherwise it will be pseudoreplication. In total we need to have 336 observations. 

sap_all_samples <- 
   rbind(sap_1, sap_2, sap_3, sap_4) %>%
   mutate(time = as.factor(time_num)) %>%  # time as factor 
   rename(ammonium = "nitrogen_ammonium", 
          nitrate = "nitrogen_nitrate") %>%
   relocate(time, .before = n_conv_eff) %>% 
   # coerce response variables <0.05 ppm to NA's
   mutate(across(where(is.character), as.numeric)) %>% 
   # summarize data to have 336 observations
   group_by(block, irr_system, foliar_trt, new_old, time_num, time) %>% 
   summarise(across(where(is.numeric), \(x)  mean(x, na.rm= TRUE))) %>% 
   ungroup() %>% 
   # relocate columns for better organization
   relocate(nitrogen, ammonium, nitrate, n_conv_eff, phosphorus, potassium, calcium, kca_ratio, magnesium, sulfur, 
            iron, manganese, boron, copper, zinc, chloride, aluminum, sodium, silica, sugars, brix, ph, ec, .after = time)


```

## 2) Exploratory data analyses (EDA)

Let's confirm that:     

- Number of blocks: 3     
- Number o treatments: 7 foliar sprays (T1, T2, T3, T4, T5, T6, T7) x 2 irrigation systems (drip and micro-sprinkler) X 2 tissues (new and old) = 28   
- Number of observations: 3 x 28 = 84 observations per sample point (4 time points x 84 = 336 observations)  

```{r}
sap_all_samples %>% psych::describe() 
```
We might consider to exclude nitrate, cobalt, molybdenum, nickel, and selenium from the analysis because they have 253, 317, 307, 150, and 297 out of 336 observations, respectively. Basically, these variables have values <0.05 ppm.  

```{r glimpse(), eval=F}
sap_all_samples %>% glimpse()
```

Density plots of macronutrients, except Potassium
```{r density plot macro}
library(ggridges)

sap_all_samples %>% 
   #pivot longer so I can plot
   pivot_longer(where(is.numeric)) %>% 
   mutate(across(c(name), as.factor)) %>% 
   # plot this variables separately 
   filter(!c(name %in% c("time_num", "n_conv_eff"))) %>%
   filter(c(name %in% c("nitrogen", "ammonium", "nitrate", "phosphorus", "calcium", "magnesium", "kca_ratio", "sulfur", "chloride"))) %>% 
   #plot 
   ggplot(., aes(x = value, y = name, fill = stat((x)))) +
   geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) + # for displaying a certain threshold
   labs(x = "ppm", 
        y = "Leaf mineral nutrients") +
   scale_fill_viridis_c(option = "D") +
   theme_minimal() +
   theme(legend.position = "none") 
```

Density plots of micronutrients and trace elements 
```{r density plot micro}
library(ggridges)

sap_all_samples %>% 
   #pivot longer so I can plot
   pivot_longer(where(is.numeric)) %>% 
   mutate(across(c(name), as.factor)) %>% 
   # plot this variables separately 
   filter(!c(name %in% c("time_num", "n_conv_eff"))) %>%
   filter(!c(name %in% c("nitrogen", "ammonium", "nitrate", "phosphorus", "potassium", "calcium", "magnesium", "kca_ratio", "sulfur", "chloride"))) %>% 
   #plot 
   ggplot(., aes(x = value, y = name, fill = stat((x)))) +
   geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) + # for displaying a certain threshold
   labs(x = "ppm", 
        y = "Leaf mineral nutrients") +
   scale_fill_viridis_c(option = "D") +
   theme_minimal() +
   theme(legend.position = "none") 
```


Boxplots of Irrigation system within each block 
```{r}
sap_all_samples %>% 
   #pivot longer so I can plot
   pivot_longer(where(is.numeric)) %>% 
   mutate(across(c(name), as.factor)) %>% 
   filter(!c(name %in% c("time_num"))) %>%
   #plot 
   ggplot(aes(x= block, y = value, fill= irr_system)) + 
   geom_boxplot(position = position_dodge(width = 0.75), alpha =0.75) + 
   geom_point(position = position_dodge(width = 0.75)) + 
   geom_rug() +
   facet_wrap(.~name, scales= "free") +
   scale_fill_viridis_d() + 
   theme_bw()
```

Boxplots of foliar treatment within each irrigation system 
```{r}
sap_all_samples %>% 
   #pivot longer so I can plot
   pivot_longer(where(is.numeric)) %>% 
   mutate(across(c(name), as.factor)) %>% 
   filter(!c(name %in% c("time_num"))) %>%
   #plot 
   ggplot(aes(x= irr_system, y = value, fill= foliar_trt)) + 
   geom_boxplot(position = position_dodge(width = 0.75), alpha =0.75) + 
   #geom_point(position = position_dodge(width = 0.75)) + 
   geom_rug() +
   facet_wrap(.~name, scales= "free") +
   scale_fill_viridis_d() + 
   theme_bw()
```

Boxplots of new/old within foliar treatment 
```{r}
sap_all_samples %>% 
   #pivot longer so I can plot
   pivot_longer(where(is.numeric)) %>% 
   mutate(across(c(name), as.factor)) %>% 
   filter(!c(name %in% c("time_num"))) %>%
   #plot 
   ggplot(aes(x= foliar_trt, y = value, fill= new_old)) + 
   geom_boxplot(position = position_dodge(width = 0.75), alpha =0.75) + 
   #geom_point(position = position_dodge(width = 0.75)) + 
   geom_rug() +
   facet_wrap(.~name, scales= "free") +
   scale_fill_viridis_d() + 
   theme_bw()
```


```{r}
#| tbl-cap: Firt 15 rows of 336 observations in the dataset. Excep Kca_ratio, ph, ec, brix, and sugars, all other variables are in ppm. NAN indicates that the values were <0.05 pmm. 

sap_all_samples %>%
  head(15) %>%
  gt() %>%
  tab_style(style = cell_text(weight = "bold"), locations = cells_column_labels())
```

## 3) Statistical model fitting
Let's remember that `lmer()` function does not allow to specify correlation structures while `lme()` allows to fit spatial and temporal correlation structures.

Because our data includes a time variable, it should be analyzed as a **split-split-plot repeated measures**.  

- For fixed effects, let's remember that our whole-plot is irrigation system, split-plot is foliar treatment, spli-split plot is new-old leaves, and time is our repeated measures.  
- For random effects the nesting goes from biggest to lowest: replicate/whole-plot/split-plot/split-split-plot. Thus, time_num is considered to be nested within old_new leaves.  

Define the correlation structures to be used in the model and select the response variables to use
```{r}
# Define a list of correlation structures
cor_structures <- list(
  none = NULL,
  CompSymm = corCompSymm(form = ~ time_num ),
  Symm = corSymm(),
  #ar1 = corAR1(form = ~ time_num ),
  Car1 = corCAR1(form = ~ time_num ),
  ARMA = corARMA(p = 1, q = 1),
  Exp = corExp(form = ~ time_num ),
  Gaus = corGaus(form = ~ time_num ),
  Lin = corLin(form = ~ time_num ),
  Ratio = corRatio(form = ~ time_num ),
  Spher = corSpher(form = ~ time_num )
)

response_vars <- 
   sap_all_samples %>% 
   select(!c(time_num, nitrate, cobalt, molybdenum, nickel, selenium)) %>% 
  select(where(is.numeric)) %>% 
  names()


```

Create a function to fit the model with a given correlation structure and response variable. The function will return the AIC of the fitted model.
```{r}
options(contrasts = c("contr.sum", "contr.poly"))

# Function to fit model 
fit_model <- function(response, cor_struct) {
  formula <- as.formula(paste(response, "~ irr_system * foliar_trt * new_old * time"))
  
  tryCatch(
    lme(
      formula,
      random = ~1 | block/irr_system/foliar_trt/new_old,
      correlation = cor_struct,
      data = sap_all_samples,
      na.action = na.exclude,
      control = lmeControl(opt = "optim")
    ),
    error = function(e) NULL
  )
}

# Now map over correlation structures and response variables
results <- map(cor_structures, function(cor_struct) {
  map(response_vars, function(response) {
    model <- fit_model(response, cor_struct)
    if (!is.null(model)) {
      AIC(model)
    } else {
      NA_real_
    }
  }) %>% set_names(response_vars)
})

```

Create a table of AIC values for each response variable and correlation structure. 
```{r}
#| tbl-cap: AIC values obtained from the linear mixed models fitted with different correlation structures for each of the response variables. 

# Make a tidy table
aic_table <- results %>%
  map_dfr(~ as_tibble(.x), .id = "cor_structure")

# View the AIC table
aic_table %>% 
  gt() %>% 
  fmt_number(columns = everything(), decimals = 2) %>%
  cols_label(
    cor_structure = "Correlation\nStructure",
    brix = "°Brix",
    n_conv_eff = "N Conv\nEff",
    nitrogen = "N",
    ammonium = md("NH<sub>4</sub>"),
    phosphorus = "P",
    potassium = "K",
    calcium = "Ca",
    magnesium     = "Mg",
    kca_ratio	 = "K/Ca",
    sulfur = "S",
    iron = "Fe",
    manganese = "Mn",
    boron = "B",
    zinc = "Zn",
    copper = "Cu",
    sugars = "Sugars",
    ec = "EC",
    silica   = "Si",
    chloride = "Cl",
    sodium   = "Na",
    ph = "pH") %>%
  cols_move (columns = c(nitrogen, n_conv_eff, phosphorus, potassium, calcium, kca_ratio, magnesium, sulfur), after = ammonium) %>%
  cols_move (columns = c(iron, copper, zinc, manganese, chloride, silica, sodium), after = boron) %>%
  tab_style(style = cell_text(weight = "bold"),
             locations = cells_column_labels()) 
  

```

Select the best model for each response variable based on AIC values. 
```{r}
#| tbl-cap: Best correlation structure based on the lowest AIC for each of the response variables. 
 
best_model_table <- 
   aic_table %>%
  pivot_longer(
    cols = -cor_structure, 
    names_to = "response", 
    values_to = "AIC"
  ) %>%
  group_by(response) %>%
  slice_min(AIC, with_ties = FALSE) %>%
  ungroup() %>%
  select(response, cor_structure, AIC)

best_model_table %>%
mutate(response = case_when(
    response == "brix"~ "°Brix",
    response == "n_conv_eff" ~ "N Conv\nEff",
    response == "nitrogen" ~ "N",
    response == "ammonium" ~ "NH4",
    response == "phosphorus" ~ "P",
    response == "potassium" ~ "K",
    response == "calcium" ~ "Ca",
    response == "magnesium"  ~ "Mg",
    response == "kca_ratio"	 ~ "K/Ca",
    response == "sulfur" ~ "S",
    response == "iron" ~ "Fe",
    response == "manganese" ~ "Mn",
    response == "boron" ~ "B",
    response == "zinc" ~ "Zn",
    response == "copper" ~ "Cu",
    response == "sugars" ~ "Sugars",
    response == "ec" ~ "EC",
    response == "silica"  ~ "Si",
    response == "chloride" ~ "Cl",
    response == "sodium"  ~ "Na",
    response == "ph" ~ "pH",
    TRUE ~ response)) %>%
  gt() %>%
  fmt_number(columns = everything(), decimals = 1) %>%
  cols_label(
    response = "Response \n variable",
    cor_structure = "Correlation\nStructure") %>% 
  tab_style(style = cell_text(weight = "bold"),
             locations = cells_column_labels()) 

```

Based on the best correlation structure for each response variable, fit the final models. 
```{r}
# Make it easier to access
best_model_list <- best_model_table %>% deframe() # named vector: response -> cor_structure

# Now fit the models
best_models <- map2(
  names(best_model_list),    # responses
  best_model_list,           # best correlation structure names
  ~ {
    formula <- as.formula(paste(.x, "~ irr_system * foliar_trt * new_old * time"))
    cor_struct <- cor_structures[[.y]]  # get the correct correlation object

    tryCatch(
      lme(
        formula,
        random = ~ 1 | block/irr_system/foliar_trt/new_old,
        correlation = cor_struct,
        data = sap_all_samples,
        na.action = na.exclude,
        control = lmeControl(opt = "optim")
      ),
      error = function(e) NULL
    )
  }
)

# Name the list by response
names(best_models) <- names(best_model_list)


```

### a) Table of p-values
```{r}
#| tbl-cap: p-values of leaf sap analysis
# Create a table of p-values
pval_table <- 
  best_models %>% 
   discard(is.null) %>%  # <-- remove NULL models first
  map(~ .x %>% Anova(type = 3) %>% tidy()) %>% # get Anova output and tidy
  map(~ .x %>% clean_names() %>% select(term, p_value)) %>% # clean names
  bind_rows(.id = "response") %>% # make a big table
  pivot_wider(names_from = response, values_from = p_value) %>% # reshape
  filter(term != "(Intercept)")  # remove intercept



# Start with basic table
tbl <- pval_table %>%
  gt() %>%
  cols_label(term = "Factor") %>%
  fmt_number(columns = everything(), decimals = 3) %>%
  tab_header(title = "", subtitle = " ") %>%
  tab_options(heading.align = "left",
              table_body.hlines.width = px(0)) %>%
  cols_label(
    brix = "°Brix",
    n_conv_eff = "N Conv\nEff",
    nitrogen = "N",
    ammonium = md("NH<sub>4</sub>"),
    phosphorus = "P",
    potassium = "K",
    calcium = "Ca",
    magnesium     = "Mg",
    kca_ratio	 = "K/Ca",
    sulfur = "S",
    iron = "Fe",
    manganese = "Mn",
    boron = "B",
    zinc = "Zn",
    copper = "Cu",
    sugars = "Sugars",
    ec = "EC",
    silica   = "Si",
    chloride = "Cl",
    sodium   = "Na",
    ph = "pH") %>%
  cols_move (columns = c(nitrogen, n_conv_eff, phosphorus, potassium, calcium, kca_ratio, magnesium, sulfur), after = ammonium) %>%
  cols_move (columns = c(iron, copper, zinc, manganese, chloride, silica, sodium), after = boron) %>%
  tab_style(style = cell_text(weight = "bold"),
             locations = cells_column_labels()) %>%
  tab_style(style = cell_fill(color = "lightgray"),
            locations = cells_body(rows = seq(1, nrow(pval_table), 2))) %>%
  tab_source_note("P ≤ 0.05 indicates significance. Significant values are in bold.") 

# highlight in bold the significant p-values (p ≤ 0.05) in the table.
tbl <- reduce(
  names(pval_table)[-1],  # all p-value columns (skip 'term')
  .init = tbl,
  .f = ~ tab_style(
    .x,
    style = cell_text(weight = "bold"),
    locations = cells_body(columns = .y, rows = .data[[.y]] < 0.05)
  )
)

tbl
```

### a) model assumptions
```{r}
library(broom.mixed)  # for augment()

# Discard NULL models from best_models
best_models_clean <- best_models %>% discard(is.null)


# 1. Make residuals and standardized residuals for each model
residuals_df <- 
  best_models %>%
  discard(is.null) %>%
  map(~ augment(.x) %>% 
        mutate(.stdresid = resid(.x, type = "pearson", scaled = TRUE))
      )

# 2. Plot random effects QQ-plots for each random term

plot_random_effects <- function(model) {
  raneffects <- ranef(model)
  
  map(raneffects, ~ 
    ggplot(.x, aes(sample = `(Intercept)`)) +
      stat_qq(shape = 21, fill = "purple", size = 3, alpha = 0.7) +
      stat_qq_line() +
      labs(x = "Theoretical quantile", y = "Sample quantile") +
      theme_bw()
  )
}

# 3. Plot residuals (fitted vs residuals) and QQ plot for residuals
plot_residuals <- function(resid_df) {
  fitted_vs_resid <- 
    ggplot(resid_df, aes(.fitted, .stdresid)) +
      geom_hline(yintercept = 0, color = "red") +
      geom_point(shape = 21, fill = "purple", size = 3, alpha = 0.7) +
      geom_smooth(se = FALSE) +
      geom_hline(yintercept = c(-3, 3), linetype = "dashed", color = "red") +
      theme_bw() +
      labs(x = "Fitted values", y = "Standardized residuals")
  
  resid_qq <- 
    ggplot(resid_df, aes(sample = .stdresid)) +
      stat_qq(shape = 21, fill = "purple", size = 3, alpha = 0.7) +
      stat_qq_line() +
      theme_bw() +
      labs(x = "Theoretical quantile", y = "Sample quantile")
  
  list(fitted_vs_resid = fitted_vs_resid, resid_qq = resid_qq)
}


# 4. map over everything
diagnostic_plots <- map2(
  names(best_models_clean),  # use the response names directly
  residuals_df,
  ~ {
    response_name <- .x  # .x is the name (e.g., "potassium")
    model <- best_models_clean[[response_name]]
    
    randef_plots <- plot_random_effects(model)
    resid_plots <- plot_residuals(.y)
    
    # combine the 6 plots
    full_plot <- (randef_plots[[1]] + randef_plots[[2]] + randef_plots[[3]] + randef_plots[[4]]) / 
                 (resid_plots$fitted_vs_resid + resid_plots$resid_qq)
    
    # add a big title using patchwork
    full_plot + plot_annotation(title = paste("Diagnostic Plots for", response_name))
  }
)

# assign plot names
names(diagnostic_plots) <- names(best_models_clean)

diagnostic_plots$brix


```
For the model assumptions, we may have problems with N conversion efficiency, sodium, silica, pH, boron,  


### b) post hoc tests 

We are interested in those interactions with foliar treatment and time, so we will run post hoc tests on those models. First, we will start from higher order interactions. 

#### Foliar treatment, new/old, and time

Sodium 
```{r}
na <- 
   best_models$sodium %>% 
   #estimated marginal means (a.k.a. least-squares means) 
   emmeans(~  foliar_trt | new_old | time) %>% # compares foliar_trt within new_old at each time point (too much time to run interaction too)
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group))
   
ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = sodium, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = sodium, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = na, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "Na (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   facet_grid(.~new_old) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.4,0.8))
```
Nanocellulose may be causeing sodim increase because there are higher values for T2. 


Sugars 
```{r}
sug <- 
   best_models$sugars %>% 
   #estimated marginal means (a.k.a. least-squares means) 
   emmeans(~  foliar_trt | new_old | time) %>% # compares foliar_trt within new_old at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group))
   
ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = sugars, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = sugars, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = sug, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "Sugars ", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   facet_grid(.~new_old) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.4,0.8))
```
We have difference within each time point in the new leaves only. For T4, T5, T6 at 72 DAB, the low sugars might be that they are not being translocated to the leaves.

#### Irrigation system, foliar treatment, and time  
Boron 
```{r}
#estimated marginal means (a.k.a. least-squares means) 
b_sym_cld <- 
   best_models$boron %>% 
   emmeans(~  foliar_trt | irr_system | time) %>% # tests 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group))

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = boron, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = boron, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = b_sym_cld, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "B (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.4,0.7))
```


Copper 
```{r}
#estimated marginal means (a.k.a. least-squares means) 
cu <- 
   best_models$copper %>% 
   emmeans(~  foliar_trt | irr_system | time) %>% # compares new_old at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = copper, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = copper, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = cu, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "Cu (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.4,0.8))
```


Magnesium 
```{r}
mg <- 
   best_models$magnesium %>% 
   emmeans(~  foliar_trt |irr_system | time) %>% # compares foliar_trt within irrigation at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = magnesium, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = magnesium, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = mg, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "Mg (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.6,0.8))
```
Mainly differences in the drip irrigation. 


Manganese 
```{r}
mn <- 
   best_models$manganese %>% 
   emmeans(~  foliar_trt |irr_system | time) %>% # compares foliar_trt within irrigation at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = manganese, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = manganese, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = mn, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "Mn (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.6,0.8))
```
Seems like most of the foliar sprays were lower in Mn compared to control and T7 (soil fertilization), at least at 86 DAB in the drip irrigation. 

#### Foliar treatment and time  
Ammonium 
```{r}
#estimated marginal means (a.k.a. least-squares means) 
nh4 <- 
   best_models$ammonium  %>% 
   emmeans(~  foliar_trt | time ) %>% # compares foliar_trt at each time point
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = ammonium, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = ammonium, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
               alpha = 0.8, , 
              position = position_dodge(width = 0.7)) + 
   #adding letters 
   geom_label(data = nh4, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -6) + 
   labs(x = "Days After Blooming", 
        y = "NH4 (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.4,0.9))
```

Calcium 
```{r}
#estimated marginal means (a.k.a. least-squares means) 
ca <- 
   best_models$calcium %>% 
   emmeans(~  foliar_trt | time) %>% # compares foliar_trt at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = calcium, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = calcium, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = ca, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "Ca (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.7,0.8))
```

Electrical conductivity 
```{r}
ec <- 
   best_models$ec %>% 
   emmeans(~  foliar_trt | time) %>% # compares foliar_trt at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = ec, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = ec, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = ec, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "Electrical conductivity ()", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.7,0.8))
```

Iron
```{r}
fe <- 
   best_models$iron %>% 
   emmeans(~  foliar_trt | time) %>% # compares foliar_trt at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = iron, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = iron, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = fe, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "Fe (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.7,0.8))
```

Potassium/Calcium ratio
```{r}
kca <- 
   best_models$kca_ratio %>% 
   emmeans(~  foliar_trt | time) %>% # compares foliar_trt at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = kca_ratio, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = kca_ratio, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = kca, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "K/Ca ratio ", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.4,0.8))
```

Nitrogen 
```{r}
n <- 
   best_models$nitrogen %>% 
   emmeans(~  foliar_trt | time) %>% # compares foliar_trt at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = nitrogen, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = nitrogen, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = n, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "N (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.4,0.8))
```

pH
```{r}
ph <- 
   best_models$ph %>% 
   emmeans(~  foliar_trt | time) %>% # compares foliar_trt at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = ph, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = ph, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = ph, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "pH (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.6,0.2))
```

Phosphorus
```{r}
p <- 
   best_models$phosphorus %>% 
   emmeans(~  foliar_trt | time) %>% # compares foliar_trt at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = phosphorus, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = phosphorus, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = p, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "P (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.4,0.9))
```

Potassium 
```{r}
k <- 
   best_models$potassium %>% 
   emmeans(~  foliar_trt | time) %>% # compares foliar_trt at each time point 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = potassium, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = potassium, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = k, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "K (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.4,0.9))
```

Silica 
```{r}
#estimated marginal means (a.k.a. least-squares means) 
si <- 
   best_models$silica %>% 
   emmeans(~  foliar_trt|irr_system| time) %>% #compares foliar_trt within each irrigation 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = silica, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = silica, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = si, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "Si (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.7,0.8))
```

Sulfur 
```{r}
s <- 
   best_models$sulfur %>% 
   emmeans(~  foliar_trt | time) %>% # 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = sulfur, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = sulfur, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = s, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "S (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.6,0.8))
```

Sulfur 
```{r}
zn <- 
   best_models$zinc %>% 
   emmeans(~  foliar_trt | time) %>% # 
   cld(alpha = 0.05, reversed = TRUE, adjust = "none", Letters=letters) %>% 
   as.data.frame() %>% 
   mutate(letter = trimws(.group)) 

ggplot(mapping = aes(fill = time)) +
   #raw data and boxplots
   geom_boxplot(data = sap_all_samples, 
                aes(x = time, y = zinc, fill = foliar_trt),
                width = 0.5,
                alpha = 0.8, 
                position = position_dodge(width = 0.7)) + 
   geom_point(data = sap_all_samples, 
               aes(x = time, y = zinc, fill = foliar_trt, group = foliar_trt), 
               shape = 21, 
               #size =3, 
              position = position_dodge(width = 0.7),
               alpha = 0.8) + 
   #adding letters 
   geom_label(data = zn, 
              aes(x = time, y = emmean, label = letter, group = foliar_trt), 
              fill = "white", 
              position = position_dodge(width = 0.7), 
               vjust = -3) + 
   labs(x = "Days after blooming", 
        y = "Zn (ppm)", 
        fill = "Foliar") +
   scale_fill_viridis_d() + 
   #facet_grid(.~irr_system) + 
   theme(panel.grid.major = element_blank(), 
         panel.grid.minor = element_blank(), 
         legend.position = c(0.6,0.8))
```

In general, we would expect the T7 to have higher levels of macronutrients since it has received soil-based fertilization twice a year, pre- and post-harvest.

## 4) Suficiency ranges for leaf sap  

Sufficiency ranges in ppm for micro- and micro-nutrients. 
```{r}
reference_ranges <- tribble(
  ~response, ~Min, ~Max,
  "N", 500, 1250,
  "P", 120, 300,
  "K", 3800, 5000,
  "Ca", 100, 200,
  "Mg", 500, 650,
  "S", 60, 120,
  "Fe", 4, 10,
  "Mn", 10, 25,
  "B", 5, 10,
  "Cu", 2, 7,
  "Zn", 3, 6,
  "Mo", 0.5, 2.5,
  "Cl", 350, 1500,
  "Na", 25, 100,
  "Si", 20, 50,
  "Sugars (%)", 1.5, 3.5,
  "°Brix (%)", 6, 10,
  "pH", 5.5, 6,
  "EC (mS/cm)", 1, 2.5
)

```


Summarise data for each time point for all variables. 
```{r}
sap_all_samples %>% 
   group_by(time_num) %>% 
   summarise(across(where(is.numeric), \(x)  mean(x, na.rm= TRUE))) %>% 
   ungroup() %>% 
   relocate(nitrogen, phosphorus, potassium, calcium, magnesium, sulfur,
            iron, manganese, boron, copper, zinc, chloride, aluminum,
            sodium, silica, sugars, brix, ph, ec, n_conv_eff, ammonium, kca_ratio, .after = time_num ) %>%
   pivot_longer(nitrogen: selenium) %>% 
   mutate(time_num = paste0("DAF", "_", time_num)) %>% 
   pivot_wider(names_from = time_num, values_from = value) %>% 
  mutate(response = name, .keep = "unused") %>%
  relocate(response, .before = DAF_40) %>%
    mutate(response = case_when(
    response == "brix"~ "°Brix (%)",
    response == "n_conv_eff" ~ "N Conv\nEff",
    response == "nitrogen" ~ "N",
    response == "ammonium" ~ "NH4",
    response == "phosphorus" ~ "P",
    response == "potassium" ~ "K",
    response == "calcium" ~ "Ca",
    response == "magnesium"  ~ "Mg",
    response == "kca_ratio"	 ~ "K/Ca",
    response == "sulfur" ~ "S",
    response == "iron" ~ "Fe",
    response == "manganese" ~ "Mn",
    response == "boron" ~ "B",
    response == "zinc" ~ "Zn",
    response == "copper" ~ "Cu",
    response == "sugars" ~ "Sugars (%)",
    response == "ec" ~ "EC (mS/cm)",
    response == "silica"  ~ "Si",
    response == "chloride" ~ "Cl",
    response == "sodium"  ~ "Na",
    response == "ph" ~ "pH",
    response == "aluminum" ~ "Al",
    response == "nitrate" ~ "NO3",
    response == "molybdenum" ~ "Mo",
    response == "nickel" ~ "Ni",
    response == "selenium" ~ "Se",
    response == "cobalt" ~ "Co",
    TRUE ~ response)) %>%
  right_join(reference_ranges, by = "response") %>%
  pivot_longer(cols = starts_with("DAF_"), names_to = "time", values_to = "value") %>%
mutate(Status = case_when(
  is.na(Min) | is.na(value) ~ NA_character_,
  value < Min ~ "Deficient",
  value > Max ~ "Excess",
  value >= Min & value <= Max ~ "Good")) %>%
pivot_wider(names_from = time, values_from = value) %>%  # Status will still be one column
  relocate(Status, .after = DAF_100 ) %>% 
   gt() %>% 
   fmt_number(columns = c(DAF_40, DAF_72, DAF_86, DAF_100), decimals = 1) %>% 
  fmt_number(columns = c(Min, Max), decimals = 0) %>% 
   tab_spanner (label = "Days After Blooming (DAB)", columns = c(DAF_40, DAF_72, DAF_86, DAF_100)) %>%
  tab_spanner (label = "Expected\nRange", columns = c(Min, Max)) %>%
  tab_spanner (label = "(ppm)", columns = c(Min , Max, DAF_40, DAF_72, DAF_86, DAF_100)) %>%
  
  cols_label(DAF_40 = "40", 
              DAF_72 = "72", 
              DAF_86 = "86", 
              DAF_100 = "100") %>%
  cols_label(response = "Response \n variable") %>% 
  tab_style(style = cell_text(weight = "bold"),
             locations = cells_column_labels()) %>% 
    tab_style(
    style = cell_text(color = "red", weight = "bold"),
    locations = cells_body(columns = Status, rows = Status == "Deficient")
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(columns = Status, rows = Status == "Excess")
  ) %>%
  tab_style(
    style = cell_text(color = "darkgreen", weight = "bold"),
    locations = cells_body(columns = Status, rows = Status == "Good")
  )
  
```


## 4) Takeaway  
Overall, Ca, S, Fe, Mn, B, and Cu, Sugars, and pH were below the minimum levels at all time points. N remained within the expected range, while P and K were above the maximum levels at preharvest. These results suggest that the plants had imbalances in macro- and micro nutrients during fruit growth that will likely compromise fruit quality. 

# Team work in GitHub  
Whether you are working with your future-self or as duos, make sure to stage, commit, and push after finishing each of the sub-sections above. When committing, write commit messages that are short and descriptive (e.g., finished wrangling).  

If you are working in duos, make sure to split the workload. I will check your collaborative work through the commit history, and if one student has contributed significantly more than the other, than that will impact grades.  

**Tip 1**: to avoid merge conflicts, make sure to **pull** first, and then start working locally. That will ensure that any changes made by your partner will be "downloaded" before you make changes to the files locally.  

**Tip 2**: make use of the Issues on this repository to set up to-do lists and assign tasks to different people. You can also use each issue/task to discuss how things should be run and get to an agreement.  

# Submitting your work  
Once you have developed all the code and answers, make sure to Render this quarto file.  

**Notes on rendering**:  

- Make sure to render your work and inspect how the final html look like.  
- If it does not look professional for whatever reason, then fix the issue, re-render it, recheck.  
- Only send me your work once your html file looks professional.  
- Some potential issues you may encounter and how to fix them:   
  - Some times your code may be creating a table output that is waaay to long and cumbersome to scroll through when rendered. If this is the case, make it more professional looking by using the `head()` function to only print the first handful of rows (instead of thousands of rows).  
  
  - **DO NOT** delete the file's heading levels (# and ##). They set up the proper heading 1 and 2 levels, and I use them to guide my grading.  
  
  - If a given chunk is also outputting warnings or messages, inhibit this behavior by changing the chunk options `message` and `warning` to `FALSE`.  
  
  - If, after rendered, 2 lines of text are connected and you wish to "break line" between them, add 2 extra spaces after the first one.  

After rendering, an .html file will be created on your `code` folder.  

Rename this file to `LASTNAME1-LASTNAME2_finalproject.html`.    
For ex., `Bastos-Mendes_finalproject.html`.

Submit the html file on eLC by **April 30th** 11:59 pm.    













  

  

